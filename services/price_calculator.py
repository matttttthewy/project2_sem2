from .google_sheets import GoogleSheetsManager
from .convert_functions import convert_pricing, convert_room_capacities, RoomCapacity
import math
from datetime import datetime, timedelta


class PricingMessage:
    def __init__(self, status: str, message: str):
        self.status = status
        self.message = message


class PriceCalculator:

    INPUT_ERROR = "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥"
    TOO_MANY_GUESTS = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥–æ—Å—Ç–µ–π"
    SUCCESS = "–£—Å–ø–µ—Ö"
    GUESTS_LIMIT = 15

    def __init__(self, google_sheets_manager: GoogleSheetsManager):
        self.google_sheets_manager = google_sheets_manager
    
    
    async def find_best_room(self, adults: int, children: int, possible_rooms: list[RoomCapacity]):
        max_capacity = max(room.capacity for room in possible_rooms)
        if max_capacity < adults + children:
            return self.TOO_MANY_GUESTS
        elif adults + children < 2:
            if adults + children <= 0:
                return self.INPUT_ERROR
            else:
                return list(sorted(possible_rooms, key=lambda x: x.capacity))[0]
        else:
            for room in possible_rooms:
                if room.capacity == adults + children:
                    return room
            return self.INPUT_ERROR

    
    async def get_possible_rooms(self, adults: int, children: int):
        sheets = await self.google_sheets_manager.get_all_sheets()
        rooms_with_capacities = list()
        for sheet in sheets:
            room = await self.google_sheets_manager.get_sheet_data(sheet, convert_room_capacities)
            rooms_with_capacities.append(room)
        return rooms_with_capacities


    async def calculate_best_price(self, start_date: str, end_date: str, adults: int, children: int):
        possible_rooms = await self.get_possible_rooms(adults, children)
        best_room = await self.find_best_room(adults, children, possible_rooms)
        if best_room == PriceCalculator.TOO_MANY_GUESTS:
            max_capacity = max(room.capacity for room in possible_rooms)
            return PricingMessage(best_room, "–ü–æ—Ö–æ–∂–µ, –º—ã –Ω–µ —Å–º–æ–∂–µ–º –∑–∞—Å–µ–ª–∏—Ç—å –≤—Å–µ—Ö –≥–æ—Å—Ç–µ–π –≤ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä. –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ö–µ–º—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥–æ—Å—Ç–µ–π –ø–æ –Ω–æ–º–µ—Ä–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n**–∫–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π –≤ –ø–µ—Ä–≤–æ–º –Ω–æ–º–µ—Ä–µ** + **–∫–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π –≤–æ –≤—Ç–æ—Ä–æ–º –Ω–æ–º–µ—Ä–µ** + ...\n\n**–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –≤ –æ–¥–Ω–æ–º –Ω–æ–º–µ—Ä–µ - " + str(max_capacity) + "**")
        elif best_room == PriceCalculator.INPUT_ERROR:
            return PricingMessage(best_room, "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—Å - –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ :)")
        else:
            pricing_list = await self.google_sheets_manager.get_sheet_data(best_room.sheet_name, convert_pricing)
            total_sum = 0
            start_date, end_date = datetime.strptime(start_date, "%d.%m"), datetime.strptime(end_date, "%d.%m")
            current = start_date
            while current < end_date:
                total_sum += pricing_list.get_price(current, True) * adults + pricing_list.get_price(current, False) * children
                current += timedelta(days=1)
            return PricingMessage(
                    self.SUCCESS,
                    (
                        f"üìÖ {(end_date - start_date).days} –Ω–æ—á–µ–π\n\n"
                        + f"üë® {adults} –≤–∑—Ä–æ—Å–ª—ã—Ö"
                        + (f" + üëß {children} –¥–µ—Ç–µ–π" if children > 0 else "")
                        + "\n\n"
                        + "üçΩ –ü–∏—Ç–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n\n"
                        + f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç {int(total_sum)}‚ÇΩ"
                    )
                )

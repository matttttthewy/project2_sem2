
# NOTE: –î–∞–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∏ –µ–≥–æ –º–æ–∂–Ω–æ —Å–º–µ–ª–æ —É–¥–∞–ª—è—Ç—å :)


from aiogram import Router, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from config.bot_config import ADMIN_IDS
from keyboards.keyboards import AddButtonStates, RemoveButtonStates, EditButtonStates, reply_Buttons, save_Buttons, load_Buttons, FILE_NAME


keyboard_router = Router(name="keyboard_router")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /menu
@keyboard_router.message(Command("menu"))
async def show_menu(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    buttons = [[KeyboardButton(text=text)] for text in reply_Buttons.keys()]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer("–ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫:", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /add_button 
@keyboard_router.message(Command("add_button"))
async def add_button(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_IDSS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏:")
    await state.set_state(AddButtonStates.waiting_for_button_text)

@keyboard_router.message(AddButtonStates.waiting_for_button_text)
async def get_new_button_text(message: types.Message, state: FSMContext):
    button_text = message.text
    if button_text in reply_Buttons:
        await message.answer("–ö–Ω–æ–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç.")
        return
    await state.update_data(button_text=button_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏:")
    await state.set_state(AddButtonStates.waiting_for_reply)

@keyboard_router.message(AddButtonStates.waiting_for_reply)
async def get_new_button_reply(message: types.Message, state: FSMContext):
    reply_text = message.text
    data = await state.get_data()
    button_text = data.get('button_text')
    reply_Buttons[button_text] = reply_text
    save_Buttons(reply_Buttons)
    await message.answer(f"–ö–Ω–æ–ø–∫–∞ '{button_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –æ—Ç–≤–µ—Ç–æ–º:\n{reply_text}")
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /remove_button
@keyboard_router.message(Command("remove_button"))
async def remove_button(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_IDSS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    if not reply_Buttons:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø—É—Å—Ç.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n" + "\n".join(reply_Buttons.keys()))
    await state.set_state(RemoveButtonStates.waiting_for_button_text)

@keyboard_router.message(RemoveButtonStates.waiting_for_button_text)
async def remove_button_text(message: types.Message, state: FSMContext):
    button_text = message.text
    if button_text in reply_Buttons:
        del reply_Buttons[button_text]
        save_Buttons(reply_Buttons)
        await message.answer(f"–ö–Ω–æ–ø–∫–∞ '{button_text}' —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.answer("–¢–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç.")
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /list_buttons
@keyboard_router.message(Command("list_buttons"))
async def list_buttons(message: types.Message):
    if not reply_Buttons:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø—É—Å—Ç.")
        return
    response = "–°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:\n\n"
    for btn, reply in reply_Buttons.items():
        response += f"üîò {btn}: {reply}\n"
    await message.answer(response)

# –ö–æ–º–∞–Ω–¥–∞ /edit_button
@keyboard_router.message(Command("edit_button"))
async def edit_button(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_IDSS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    if not reply_Buttons:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø—É—Å—Ç.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n" + "\n".join(reply_Buttons.keys()))
    await state.set_state(EditButtonStates.waiting_for_button_text)

@keyboard_router.message(EditButtonStates.waiting_for_button_text)
async def get_button_to_edit(message: types.Message, state: FSMContext):
    button_text = message.text
    if button_text not in reply_Buttons:
        await message.answer("–¢–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç.")
        await state.clear()
        return
    await state.update_data(button_text=button_text)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ '{button_text}':")
    await state.set_state(EditButtonStates.waiting_for_new_reply)

@keyboard_router.message(EditButtonStates.waiting_for_new_reply)
async def get_new_reply_text(message: types.Message, state: FSMContext):
    new_reply = message.text
    data = await state.get_data()
    button_text = data.get('button_text')
    reply_Buttons[button_text] = new_reply
    save_Buttons(reply_Buttons)
    await message.answer(f"–û—Ç–≤–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ '{button_text}' –æ–±–Ω–æ–≤–ª—ë–Ω:\n{new_reply}")
    await state.clear()


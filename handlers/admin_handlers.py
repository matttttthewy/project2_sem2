from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from config.bot_config import ADMIN_IDS, FAQ_STORAGE_PATH
from keyboards import AdminKeyboard, MainKeyboard, FAQModerateKeyboard, UserFaqKeyboard
from aiogram.types import Message, CallbackQuery
from storage import db
from storage.db_handler import DBHandler
import aiosqlite
from datetime import datetime, timedelta
from aiogram.fsm.state import State, StatesGroup
import asyncio
from utils import FaqDataHandler
from filters import QuestionAlreadyExists
from states import AdminStates
from handlers.general_hanlders import start_handler

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
admin_router = Router(name="admin_router")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîí –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
@admin_router.message(lambda message: message.text in ["üîí –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", "üîí Admin panel"] or message.text == "/admin")
async def admin_panel_handler(message: Message, state: FSMContext, is_admin: bool = False):
    print(f"DEBUG: message.text = {message.text!r}")
    if not is_admin:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏." if message.text == "üîí –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" else "You do not have access to the admin panel."
        )
        return
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î, –µ—Å–ª–∏ –Ω–µ—Ç - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
    user = await db.get_user(telegram_id=str(message.from_user.id))
    if user and getattr(user, "language", None):
        language = user.language
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
        if message.text == "üîí Admin panel":
            language = "en"
        else:
            language = "ru"
    keyboard = AdminKeyboard.get_admin_keyboard(language)
    await message.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–º–∞–Ω–¥—ã /stats \n/broadcast \n/admin" if language == "ru" else "Admin panel: you can also use commands /stats \n /broadcast \n/admin",
        reply_markup=keyboard
    )

@admin_router.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" or message.text == "‚¨ÖÔ∏è Back")
async def back_to_main_menu(message: Message, state: FSMContext, is_admin: bool = False):
    if not is_admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await state.clear()
    await start_handler(message, state, is_admin=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@admin_router.message(lambda message: message.text in ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìä Stats", '/stats'])
async def admin_stats_handler(message: Message, is_admin: bool = False):
    if not is_admin:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
        if message.text == "üìä Stats":
            await message.answer("You do not have access to this command.")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î, –µ—Å–ª–∏ –Ω–µ—Ç - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
    user = await db.get_user(telegram_id=str(message.from_user.id))
    if user and getattr(user, "language", None):
        language = user.language
    else:
        language = "en" if message.text == "üìä Stats" else "ru"

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    total_users = len(await db.get_all_users())
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    one_week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
    users = await db.get_all_users()
    new_users = sum(1 for user in users if user.date_joined >= one_week_ago)

    if language == "en":
        text = (
            f"üë• Total users: <b>{total_users}</b>\n"
            f"üÜï New this week: <b>{new_users}</b>"
        )
    else:
        text = (
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
            f"üÜï –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{new_users}</b>"
        )
    await message.answer(text, parse_mode="HTML")



MAX_CONCURRENT_SENDS = 20  # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –±–æ–ª–µ–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π

async def send_message_safe(bot, user_id, text):
    try:
        await bot.send_message(user_id, text)
        return True
    except Exception:
        return False

@admin_router.message(lambda message: message.text in ["üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "üì¢ Broadcast", '/broadcast'])
async def admin_broadcast_start(message: Message, state: FSMContext, is_admin: bool = False):
    if not is_admin:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ." if message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞" else "You do not have access to this command."
        )
        return
    await state.set_state(AdminStates.waiting_for_broadcast_text)
    if message.text == "üì¢ Broadcast":
        await message.answer("Please send the message you want to broadcast to all users.")
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@admin_router.message(AdminStates.waiting_for_broadcast_text)
async def admin_broadcast_send(message: Message, state: FSMContext, is_admin: bool = False):
    if not is_admin:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ." if message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞" else "You do not have access to this command."
        )
        return

    users = await db.get_all_users()
    text = message.text

    semaphore = asyncio.Semaphore(MAX_CONCURRENT_SENDS)

    async def sem_send(user):
        async with semaphore:
            return await send_message_safe(message.bot, user.telegram_id, text)

    tasks = [sem_send(user) for user in users]
    results = await asyncio.gather(*tasks)
    count = sum(results)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω—É
    user = await db.get_user(telegram_id=str(message.from_user.id))
    language = getattr(user, "language", None)
    if not language:
        language = "en" if message.text == "üì¢ Broadcast" else "ru"

    if language == "en":
        await message.answer(f"Broadcast finished. Message sent to {count} users.")
    else:
        await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()


@admin_router.message(lambda message: message.text == "‚ùì –†–µ–¥–∞–∫—Ç–æ—Ä FAQ" or message.text == "‚ùì FAQ editor")
async def admin_faq_editor(message: Message, state: FSMContext, is_admin: bool, faq_path: str):
    if not is_admin:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ." if message.text == "‚ùì –†–µ–¥–∞–∫—Ç–æ—Ä FAQ" else "You do not have access to this command."
        )
        return
    reply_markup = FAQModerateKeyboard.get_faq_moderate_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

@admin_router.callback_query(lambda c: c.data in ["add_faq", "remove_faq", "edit_faq"])
async def admin_faq_moderate(callback: CallbackQuery, state: FSMContext, is_admin: bool, faq_path: str):
    if not is_admin:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    if callback.data == 'add_faq':
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        await state.set_state(AdminStates.waiting_for_new_faq_question)
    elif callback.data == 'remove_faq':
        faq_list = FaqDataHandler.get_questions(faq_path)
        keyboard = await UserFaqKeyboard.get_keyboard(faq_list)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å", reply_markup=keyboard)
        await state.set_state(AdminStates.waiting_for_remove_faq_question)
    elif callback.data == 'edit_faq':
        faq_list = FaqDataHandler.get_questions(faq_path)
        keyboard = await UserFaqKeyboard.get_keyboard(faq_list)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", reply_markup=keyboard)
        await state.set_state(AdminStates.waiting_for_edit_faq)

@admin_router.message(QuestionAlreadyExists(FAQ_STORAGE_PATH), AdminStates.waiting_for_new_faq_question)
async def admin_add_faq_question_already_exists(message: Message, state: FSMContext, is_admin: bool, faq_path: str):
    if not is_admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer("–¢–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –°–æ—Å—Ç–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ, –ª–∏–±–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π.")
    await state.clear()

@admin_router.message(AdminStates.waiting_for_new_faq_question)
async def admin_add_faq_question(message: Message, state: FSMContext, is_admin: bool, faq_path: str):
    if not is_admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await state.update_data(new_faq_question=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
    await state.set_state(AdminStates.waiting_for_new_faq_answer)

@admin_router.message(AdminStates.waiting_for_new_faq_answer)
async def admin_add_faq_answer(message: Message, state: FSMContext, is_admin: bool, faq_path: str):
    if not is_admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    question = (await state.get_data())['new_faq_question']
    answer = message.text
    FaqDataHandler.add_question(faq_path, question, answer)
    await message.answer("–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()
    await admin_panel_handler(message, state, is_admin=True)

@admin_router.message(AdminStates.waiting_for_remove_faq_question)
async def admin_remove_faq_question(message: Message, state: FSMContext, is_admin: bool, faq_path: str):
    if not is_admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    keyboard = FAQModerateKeyboard.approve_delete_faq_keyboard()
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_remove_faq_question_confirmation)
    await state.update_data(remove_faq_question=message.text)

@admin_router.callback_query(lambda c: c.data in ["approve_delete_faq", "cancel_delete_faq"])
async def admin_remove_faq_question_confirmation(callback: CallbackQuery, state: FSMContext, is_admin: bool, faq_path: str):
    if not is_admin:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    if callback.data == "approve_delete_faq":
        question = (await state.get_data())['remove_faq_question']
        FaqDataHandler.remove_question(faq_path, question)
        await callback.message.answer("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
    elif callback.data == "cancel_delete_faq":
        await state.clear()
        await admin_panel_handler(callback.message, state, is_admin=True)

@admin_router.message(AdminStates.waiting_for_edit_faq)
async def admin_edit_faq_question(message: Message, state: FSMContext, is_admin: bool, faq_path: str):
    if not is_admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    keyboard = FAQModerateKeyboard.chose_edit_action_faq_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_choose_edit_action_faq)
    await state.update_data(edit_faq_question=message.text, edit_faq_question_or_answer=None)

@admin_router.callback_query(lambda c: c.data in ["edit_question_faq", "edit_answer_faq"])
async def admin_edit_faq_question_or_answer(callback: CallbackQuery, state: FSMContext, is_admin: bool, faq_path: str):
    if not is_admin:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    if callback.data == "edit_question_faq":
        await state.set_state(AdminStates.waiting_for_edit_faq_question)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
    elif callback.data == "edit_answer_faq":
        await state.set_state(AdminStates.waiting_for_edit_faq_answer)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
    await state.update_data(edit_faq_question_or_answer=callback.data)

@admin_router.message(AdminStates.waiting_for_edit_faq_answer)
async def admin_edit_faq_answer(message: Message, state: FSMContext, is_admin: bool, faq_path: str):
    if not is_admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    question = (await state.get_data())['edit_faq_question']
    answer = message.text
    FaqDataHandler.edit_answer(faq_path, question, answer)
    await message.answer("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()
    await admin_panel_handler(message, state, is_admin=True)

@admin_router.message(AdminStates.waiting_for_edit_faq_question)
async def admin_edit_faq_question(message: Message, state: FSMContext, is_admin: bool, faq_path: str):
    if not is_admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    question = (await state.get_data())['edit_faq_question']
    new_question = message.text
    FaqDataHandler.edit_question(faq_path, question, new_question)
    await message.answer("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()
    await admin_panel_handler(message, state, is_admin=True)


@admin_router.callback_query(lambda c: c.data == "back_to_admin")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext, is_admin: bool, faq_path: str):
    if not is_admin:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await state.clear()
    await admin_panel_handler(callback.message, state, is_admin=True)
